// <auto-generated />
using System;
using ArticleService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticleService.Migrations
{
    [DbContext(typeof(ArticleDBContext))]
    [Migration("20221025153706_A")]
    partial class A
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ArticleService.Domain.ArtCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex(new[] { "Name", "ParentId", "UserId" }, "IX_ArtCategory");

                    b.ToTable("ArtCategory");
                });

            modelBuilder.Entity("ArticleService.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("CodeStyle")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codeStyle");

                    b.Property<int>("CommentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentStatus")
                        .HasDefaultValueSql("((1))")
                        .HasComment("-1不可以评论1可评论2需要审核评论");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("ContentStyle")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contentStyle");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(now())");

                    b.Property<int>("IsLock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("isLock")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1未锁定-1锁定");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("photo");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("regionId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))")
                        .HasComment("-1待审核1已发布2私有3回收站4草稿");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "CreateTime" }, "IX_Article");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("ArticleService.Domain.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex(new[] { "ArticleId", "TagId" }, "IX_ArticleTag")
                        .IsUnique();

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("ArticleService.Domain.ArtRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1启用-1禁用");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex(new[] { "Id", "ParentId" }, "IX_ArtRegion");

                    b.HasIndex(new[] { "Name" }, "IX_ArtRegion_1")
                        .IsUnique();

                    b.ToTable("ArtRegion");
                });

            modelBuilder.Entity("ArticleService.Domain.GlobalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GlobalSetting");
                });

            modelBuilder.Entity("ArticleService.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<int>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("isPrivate")
                        .HasDefaultValueSql("((-1))")
                        .HasComment("-1私有标签1公共标签");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Tags")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ArticleService.Domain.ArtCategory", b =>
                {
                    b.HasOne("ArticleService.Domain.ArtCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ArticleService.Domain.Article", b =>
                {
                    b.HasOne("ArticleService.Domain.ArtCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Article_Category");

                    b.HasOne("ArticleService.Domain.ArtRegion", "Region")
                        .WithMany("Articles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Article_ArtRegion");

                    b.Navigation("Category");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ArticleService.Domain.ArticleTag", b =>
                {
                    b.HasOne("ArticleService.Domain.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleTag_Article");

                    b.HasOne("ArticleService.Domain.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleTag_Tags");

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ArticleService.Domain.ArtRegion", b =>
                {
                    b.HasOne("ArticleService.Domain.ArtRegion", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ArtRegion_ArtRegion");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ArticleService.Domain.ArtCategory", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("ArticleService.Domain.Article", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("ArticleService.Domain.ArtRegion", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("ArticleService.Domain.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });
#pragma warning restore 612, 618
        }
    }
}
