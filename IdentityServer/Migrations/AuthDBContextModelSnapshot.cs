// <auto-generated />
using System;
using IdentityService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityService.Migrations
{
    [DbContext(typeof(AuthDBContext))]
    partial class AuthDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IdentityService.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("controller");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("isPublic")
                        .HasDefaultValueSql("((-1))")
                        .HasComment("1匿名权限-1私有权限");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("service");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1启用-1禁用");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Action", "Controller", "Service" }, "IX_Permission")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("IdentityService.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(now())");

                    b.Property<int>("IsDefault")
                        .HasColumnType("int")
                        .HasColumnName("isDefault")
                        .HasComment("1默认-1不默认");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))")
                        .HasComment("-1禁用1启用");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Role")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("IdentityService.Domain.RolePermissionRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permissionId");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PermissionId", "RoleId" }, "IX_RolePermissionRelation")
                        .IsUnique();

                    b.ToTable("RolePermissionRelation");
                });

            modelBuilder.Entity("IdentityService.Domain.UserRoleRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId", "UserId" }, "IX_UserRoleRelation");

                    b.ToTable("UserRoleRelation");
                });

            modelBuilder.Entity("IdentityService.Domain.RolePermissionRelation", b =>
                {
                    b.HasOne("IdentityService.Domain.Permission", "Permission")
                        .WithMany("RolePermissionRelations")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissionRelation_Permission");

                    b.HasOne("IdentityService.Domain.Role", "Role")
                        .WithMany("RolePermissionRelations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissionRelation_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdentityService.Domain.UserRoleRelation", b =>
                {
                    b.HasOne("IdentityService.Domain.Role", "Role")
                        .WithMany("UserRoleRelations")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleRelation_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdentityService.Domain.Permission", b =>
                {
                    b.Navigation("RolePermissionRelations");
                });

            modelBuilder.Entity("IdentityService.Domain.Role", b =>
                {
                    b.Navigation("RolePermissionRelations");

                    b.Navigation("UserRoleRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
