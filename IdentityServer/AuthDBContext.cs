// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using IdentityService.Domain;

namespace IdentityService
{
    public partial class AuthDBContext : DbContext
    {

        public AuthDBContext(DbContextOptions<AuthDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermissionRelation> RolePermissionRelations { get; set; }
        public virtual DbSet<UserRoleRelation> UserRoleRelations { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Permission>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublic)
                    .HasDefaultValueSql("((-1))")
                    .HasComment("1匿名权限-1私有权限");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1启用-1禁用");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("-1禁用1启用");
            });

            modelBuilder.Entity<RolePermissionRelation>(entity =>
            {
                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RolePermissionRelations)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_RolePermissionRelation_Permission");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolePermissionRelations)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_RolePermissionRelation_Role");
            });

            modelBuilder.Entity<UserRoleRelation>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoleRelations)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserRoleRelation_Role");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}